# backend/main.py  ‚Äî SoznAi v4.4-pre (safe mode: works with or without BOT_TOKEN)
import os
import threading
import contextlib

# .env –ø–æ–¥—Ö–≤–∞—Ç—ã–≤–∞–µ–º –º—è–≥–∫–æ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω)
with contextlib.suppress(Exception):
    from dotenv import load_dotenv  # type: ignore
    load_dotenv()

from fastapi import FastAPI
from fastapi.responses import PlainTextResponse, JSONResponse

APP_NAME = "SoznAi"
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
BOT_USERNAME = os.getenv("BOT_USERNAME", "").strip() or "soznai_bot"
WEBAPP_URL = os.getenv("WEBAPP_URL", "").strip()
PORT = int(os.getenv("PORT", "10000"))  # Railway/Koyeb —Å—Ç–∞–≤—è—Ç PORT

app = FastAPI(title=APP_NAME)
MODE = "offline"  # offline | bot
_bot_thread = None  # type: ignore


@app.get("/healthz", response_class=PlainTextResponse)
def healthz():
    return "ok"


@app.get("/mode")
def get_mode():
    return {"mode": MODE, "bot_username": BOT_USERNAME if MODE == "bot" else None}


@app.get("/", response_class=PlainTextResponse)
def root():
    hint = (
        f"{APP_NAME} backend running ({MODE}). "
        f"Health: /healthz, Mode: /mode"
    )
    return hint


def _run_bot_polling():
    """–ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
    –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å aiogram 2.x. –ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç/–Ω–µ —Ç–∞ –≤–µ—Ä—Å–∏—è ‚Äî –æ—Å—Ç–∞—ë–º—Å—è offline."""
    try:
        # aiogram 2.x
        from aiogram import Bot, Dispatcher, executor, types  # type: ignore

        bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
        dp = Dispatcher(bot)

        @dp.message_handler(commands=["start", "help"])
        async def _(m: types.Message):
            text = (
                "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ SoznAi.\n"
                "–û—Ç–∫—Ä–æ–π WebApp: "
                f"{WEBAPP_URL or '—É–∫–∞–∂–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é WEBAPP_URL'}"
            )
            await m.answer(text)

        executor.start_polling(dp, skip_updates=True)

    except Exception as e:
        # –ï—Å–ª–∏ aiogram 3.x –∏–ª–∏ –Ω–µ—Ç aiogram ‚Äî –Ω–µ –≤–∞–ª–∏–º—Å—è, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥ –∏ offline
        print(f"‚ö†Ô∏è Bot thread stopped: {e}")


def maybe_start_bot():
    global MODE, _bot_thread
    if not BOT_TOKEN:
        MODE = "offline"
        print("‚ö†Ô∏è BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Ä–∞–±–æ—Ç–∞–µ–º –≤ offline-—Ä–µ–∂–∏–º–µ (–±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω).")
        return

    # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å aiogram
    try:
        import aiogram  # noqa: F401
    except Exception as e:
        MODE = "offline"
        print(f"‚ö†Ô∏è aiogram –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω/–Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º: {e}. Offline-—Ä–µ–∂–∏–º.")
        return

    MODE = "bot"
    print("ü§ñ –ó–∞–ø—É—Å–∫–∞—é Telegram-–±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ‚Ä¶")
    _bot_thread = threading.Thread(target=_run_bot_polling, daemon=True)
    _bot_thread.start()


def run():
    # –°—Ç–∞—Ä—Ç—É–µ–º –±–æ—Ç (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
    maybe_start_bot()

    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä
    import uvicorn
    print(f"‚úÖ {APP_NAME} –∑–∞–ø—É—â–µ–Ω –Ω–∞ 0.0.0.0:{PORT} (mode={MODE})")
    uvicorn.run(app, host="0.0.0.0", port=PORT, log_level="info")


if __name__ == "__main__":
    run()
